#version 150

uniform sampler2D tex;
uniform sampler2D etex;
uniform sampler2D stex;

#define MAX_LIGHTS 5
uniform vec3 lightPos[MAX_LIGHTS];

uniform vec3 eyePos;
uniform vec4 border;

in vec2 v_texcoord;
in vec3 v_normal;
in vec3 v_worldPos;

out vec4 color;

void main(){
    vec3 N = normalize(v_normal);
    vec3 V = normalize(eyePos - v_worldPos);

	vec3 specular = vec3(0, 0, 0);
	float diffuse = 0.0;

	int count = 0;
	while (count < MAX_LIGHTS)
	{
		vec3 L = normalize(lightPos[count] - v_worldPos);
		vec3 R = reflect(-L, N);
	
		diffuse += clamp(dot(N, L), 0.0, 1.0);
	
		//specular += pow(max(0.0, dot(V, R)), 32.0);
		//specular = clamp (specular, 0.0, 1.0);
		//specular *= sign(diffuse);
    
		float r = 12.0;
		vec3 H = normalize(L+V);
		float cos_a = dot(V,N);
		float cos_b = dot(N,L);
		float cos_c = dot(V,H);
		float cos_d = dot(H,N);
		vec3 sqrtk = sqrt(min(texture(tex ,v_texcoord).rgb,vec3(0.95)));
		vec3 n = (-vec3(1.0) - sqrtk)/(sqrtk - vec3(1.0));
		vec3 q = sqrt(vec3(cos_c)*vec3(cos_c)-vec3(1.0)+n*n);
		vec3 f1 = q-vec3(cos_c);
		vec3 f2 = q+vec3(cos_c);
		vec3 f3 = (f2*cos_c) - vec3(1);
		vec3 f4 = (f1*cos_c) + vec3(1);
		vec3 F = vec3(0.5)*((f1/f2)*(f1/f2))*(vec3(1)+((f3/f4)*(f3/f4)));
		float cos2d = cos_d *cos_d;
		float M = r*exp(r*(1 - (1/cos2d)))/(4.0*cos2d*cos2d);
		float A = clamp((2*(cos_d)*min(cos_a,cos_b))/cos_c,0.0,1.0);
		vec3 tempSpecular = vec3(M)*F*vec3(A)/(cos_a*cos_b*vec3(3.14159265358979323));
		tempSpecular *= sign(dot(N,L));
		specular += tempSpecular;

		count += 1;
	}
	
	specular = vec3(clamp (specular.x, 0.0, 1.0), clamp (specular.y, 0.0, 1.0), clamp (specular.z, 0.0, 1.0));
	diffuse = clamp (diffuse, 0.0, 1.0);

    color = texture(tex ,v_texcoord);
    color.rgb *= diffuse;
    color.rgb += specular.rgb * texture(stex, v_texcoord).rgb;
    color.rgb += texture(etex, v_texcoord).rgb;

	vec2 tmp = vec2(1,1) - v_texcoord;
    tmp = min( tmp,v_texcoord);
    float t = min(tmp.x,tmp.y);
    if( t < border.w ){
        t = (border.w-t)/border.w;
        color.rgb = mix(border.rgb,color.rgb,1-t);
    }
}
